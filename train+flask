import os
import cv2
import pytesseract
import joblib
import sqlite3
from flask import Flask, request, jsonify
from PIL import Image
import numpy as np

app = Flask(__name__)

# Load Trained Model & Vectorizer
model = joblib.load("serial_number_model.pkl")
vectorizer = joblib.load("vectorizer.pkl")

# Connect to Database
conn = sqlite3.connect("devices.db", check_same_thread=False)
cursor = conn.cursor()

pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

def preprocess_image(image_path):
    """Enhance image for OCR."""
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (3, 3), 0)
    _, threshold = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return threshold

def get_best_match(serial_number):
    """Find closest match using the trained model."""
    X_input = vectorizer.transform([serial_number])
    index = model.predict(X_input)[0]

    # Retrieve Serial Number from DB
    cursor.execute("SELECT serial_number FROM serial_numbers LIMIT 1 OFFSET ?", (index,))
    matched_serial = cursor.fetchone()
    
    return matched_serial[0] if matched_serial else None

@app.route("/upload", methods=["POST"])
def upload_image():
    """Process uploaded image and extract serial number."""
    if "image" not in request.files:
        return jsonify({"error": "No image uploaded."}), 400

    image = request.files["image"]
    filepath = os.path.join("uploads", image.filename)
    image.save(filepath)

    processed_image = preprocess_image(filepath)
    extracted_text = pytesseract.image_to_string(processed_image, config="--psm 6").strip().upper()

    if not extracted_text:
        return jsonify({"error": "No text detected in image."}), 400

    best_match = get_best_match(extracted_text)

    if best_match:
        cursor.execute("SELECT * FROM serial_numbers WHERE serial_number = ?", (best_match,))
        result = cursor.fetchone()
        message = f"Device Found! Primary User: {result[2]}" if result[3] else "Device Not Found."
    else:
        message = "Serial Number not recognized."

    return jsonify({"Extracted Serial Number": extracted_text, "Best Match": best_match, "Message": message})

if __name__ == "__main__":
    app.run(debug=True)
